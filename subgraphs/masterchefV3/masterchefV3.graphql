# MasterChef
type MasterChef @entity {
  # Contract address
  id: ID!

  # Owner
  owner: Bytes!

  # Start timestamp
  startTimestamp: BigInt!

  # PID of parent MasterChef which this MasterChef is linked to
  masterPid: Int!

  # Joe
  volt: Bytes!

  # Volt per sec
  voltPerSec: BigInt!

  # Total allocation point
  totalAllocPoint: BigInt!

  # Pools
  pools: [Pool!]! @derivedFrom(field: "owner")

  # Pool count
  poolCount: BigInt!

  # FLP Balance
  flpBalance: BigDecimal!

  # FLP Age
  flpAge: BigDecimal!

  # FLP Removed
  flpAgeRemoved: BigDecimal!

  # FLP Deposited
  flpDeposited: BigDecimal!

  # FLP Withdrawn
  flpWithdrawn: BigDecimal!

  # History
  history: [History!]! @derivedFrom(field: "owner")

  # Upated at
  updatedAt: BigInt!
}

type History @entity {
  # Master chef id concatenated with timestamp
  id: ID!

  # Owner (MasterChef, Pool, or User).
  owner: MasterChef!

  # FLP Balance
  flpBalance: BigDecimal!

  # FLP Age
  flpAge: BigDecimal!

  # FLP Removed
  flpAgeRemoved: BigDecimal!

  # FLP Deposited
  flpDeposited: BigDecimal!

  # FLP Withdrawn
  flpWithdrawn: BigDecimal!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!
}

# Pool
type Pool @entity {
  # Index of pool in poolInfo on MasterChef contract
  id: ID!

  # Owner
  owner: MasterChef!

  # Pair Liquidity Token Address
  pair: Bytes!

  # Rewarder contract address
  rewarder: Rewarder

  # Allocation point
  allocPoint: BigInt!

  # Last reward block
  lastRewardTimestamp: BigInt!

  # Accumulated joe per share
  accVoltPerShare: BigInt!

  # FLP token balance
  balance: BigInt!

  # Pool users
  users: [User!]! @derivedFrom(field: "pool")

  # User count
  userCount: BigInt!

  # FLP Balance
  flpBalance: BigDecimal!

  # FLP Age
  flpAge: BigDecimal!

  # FLP Removed
  flpAgeRemoved: BigDecimal!

  # FLP Deposited
  flpDeposited: BigDecimal!

  # FLP Withdrawn
  flpWithdrawn: BigDecimal!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!

  # Upated at
  updatedAt: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Volt harvested
  voltHarvested: BigDecimal!

  # Volt harvested
  voltHarvestedUSD: BigDecimal!
}

type Rewarder @entity {
  # Contract address
  id: ID!

  # Reward token address
  rewardToken: Bytes!
  name: String!
  symbol: String!
  decimals: Int!

  tokenPerSec: BigInt!

  endTimestamp: BigInt!
}

type PoolHistory @entity {
  # Pool id concatenated with timestamp
  id: ID!

  # Pool
  pool: Pool!

  # FLP Balance
  flpBalance: BigDecimal!

  # FLP Age
  flpAge: BigDecimal!

  # FLP Removed
  flpAgeRemoved: BigDecimal!

  # FLP Deposited
  flpDeposited: BigDecimal!

  # FLP Withdrawn
  flpWithdrawn: BigDecimal!

  # User Count
  userCount: BigInt!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Volt harvested
  voltHarvested: BigDecimal!

  # Volt harvested
  voltHarvestedUSD: BigDecimal!
}

type User @entity {
  # Pool id concatenated with user address
  id: ID!

  # User address
  address: Bytes!

  # Related pool
  pool: Pool

  # We do some fancy math here. Basically, any point in time, the amount of JOEs
  # entitled to a user but is pending to be distributed is:
  # pending reward = (user.amount * pool.accJoePerShare) - user.rewardDebt
  # Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:
  # 1. The pool's `accJoePerShare` (and `lastRewardTimestamp`) gets updated.
  # 2. User receives the pending reward sent to his/her address.
  # 3. User's `amount` gets updated.
  # 4. User's `rewardDebt` gets updated.

  # Amount
  amount: BigInt!

  # Reward debt
  rewardDebt: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Volt harvested
  voltHarvested: BigDecimal!

  # Volt harvested
  voltHarvestedUSD: BigDecimal!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!
}
